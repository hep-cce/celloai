import subprocess
import sys
import os

src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../src"))
sys.path.insert(0, src_path)
from merge_callgraphs import merge_dot_files_enhanced
from function_relationships import get_relationship_text, load_function_graph
from config import *

def run_doxygen(dir_path, doxyfile_path="Doxyfile"):
    """
    Runs Doxygen using the specified Doxyfile.

    Args:
        doxyfile_path (str, optional): Path to the Doxyfile. Defaults to "Doxyfile".
    """
    try:
      # Construct the command
      command = ["doxygen", doxyfile_path]

      # Pass directory to Doxygen
      my_env = os.environ.copy()
      my_env["DOXYGEN_INPUT"] = f"{dir_path}"
      my_env["DOXYGEN_OUTPUT"] = f"{dir_path}"
      
      # Execute the command
      process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=my_env)
      stdout, stderr = process.communicate()

      # Handle output and errors
      if process.returncode == 0:
          print("Doxygen run successfully.")
          print(stdout.decode())
      else:
          print(f"Doxygen failed with error code {process.returncode}.")
          print(stderr.decode())

    except FileNotFoundError:
        print("Error: Doxygen executable not found. Ensure it is in your PATH or provide the full path.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def walk_json(obj, prefix=""):
    """
    Recursively traverse all keys/values in a JSON structure,
    printing each path and value along the way.
    """
    if isinstance(obj, dict):
        # If this is a dictionary, iterate over its key-value pairs
        for key, value in obj.items():
            # Build a "path" like "user.name" or "items[3].price"
            new_prefix = f"{prefix}.{key}" if prefix else key
            walk_json(value, prefix=new_prefix)
    elif isinstance(obj, list):
        # If this is a list, iterate over its elements
        for index, item in enumerate(obj):
            new_prefix = f"{prefix}[{index}]"
            walk_json(item, prefix=new_prefix)
    else:
        # Base case: It's not a dict or list, so just print the final field + value
        print(f"{prefix} = {obj}")

if __name__ == "__main__":
    
    ## Check if Doxyfile exists in the current directory, otherwise use provided path.
    doxyfile_path = "scripts/Doxyfile"
    dir_path = DIR_PATH
    doxygen_html_path = os.path.join(dir_path,"html")

    # Generate doxygen callgraphs
    run_doxygen(dir_path, doxyfile_path)

    # Merge all callgraphs generated by Doxygen into a large one
    merged_graph, stats, png_path = merge_dot_files_enhanced(output_dir=doxygen_html_path)

    json_path = os.path.join(doxygen_html_path,"merged_graph.json")
  
    # Load function relationships
    graph = load_function_graph(json_path)
    function_name = "CaloGpuGeneral_cu::simulate_A"
    relationship_text = get_relationship_text(function_name, graph)
    print(function_name, relationship_text)

    function_name1= "simulate_A"
    relationship_text1= get_relationship_text(function_name1, graph)
    print(function_name1, relationship_text1)

    function_name2= "testHello"
    relationship_text2= get_relationship_text(function_name2, graph)
    print(function_name2, relationship_text2)


    #import json
    #with open(json_path, "r") as f:
    #    data = json.load(f)
    #walk_json(data) 
