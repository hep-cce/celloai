import os
from config import *
from config import TEXT_EMBEDDING_MODEL_NAME, CODE_EMBEDDING_MODEL_NAME

def remove_comment_block_init_end(answer):
    
    # this is needed as a check to remove any possibility
    # of incompilable hallucination or nested comment blocks
    answer = answer.replace('\n/**\n','')
    answer = answer.replace('/**\n','')
    answer = answer.replace('/**','')
    return answer.replace('*/','')


def rewrite_file_with_comments(functions, file_path, prompt, qa, temperature): 


    if len(functions) > 0:
        file_path_comments = file_path + ".comments.cxx"
        print(f'Generating comments for {len(functions)} functions in {file_path}', flush=True)
 
        functions_first_line = []
        for function in functions:
            #print("FF", function)
            newline_index = function.index('\n')
            line = function[:newline_index]
            functions_first_line.append(line)


        idx = 0
        try:
            with open(file_path, 'r', encoding="latin-1") as source_file:
                with open(file_path_comments, 'w', encoding="utf-8") as destination_file:
                    for line in source_file:
                        # if there are no function definitions
                        if len(functions_first_line) > 0:
                            # if all functions have been read
                            if idx == len(functions_first_line):
                                destination_file.write(line)
                            else:
                                # Strip the lines of trailing/leading whitespaces
                                if line.strip() == functions_first_line[idx].strip():
                                    query = prompt + functions[idx]
                                    res = qa(query)
                                    answer, docs = res["result"], res["source_documents"]
                                    destination_file.write("/**")
                                    clean_answer = remove_comment_block_init_end(answer)
                                    print(f"Going to write \n'{clean_answer}'", flush=True)
                                    destination_file.write(clean_answer)
                                    destination_file.write(f"* This comment was generated by {MODEL_ID}:{MODEL_BASENAME} at temperature {temperature}.\n")
                                    destination_file.write("*/ \n")
                                    destination_file.write(line)
                                    print(f'Function {idx}: {line} Done', flush=True)
                                    idx = idx + 1
                                else:
                                    destination_file.write(line)
                        else:
                            destination_file.write(line)

        except FileNotFoundError:
            print(f"Error: The file {c_file_path} was not found.")
        except IOError as e:
            print(f"Error: An I/O error occurred. {e}")

        # Exchange file names
        #os.rename(file_path, file_path+'.orig')
        os.rename(file_path_comments, file_path)

    else:
        print(f'No functions captured.', flush=True)


